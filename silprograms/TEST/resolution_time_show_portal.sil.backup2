//проставление комментария с средним временем решения задач с таким же сервисом 
string myproject = "IT"; 
// string myService = customfield_10103; //Metro Service 
string myPeriod = "-30d";
string myPeriodText = substring(myPeriod, 1, 3);
//string myJQL = "project = "+ myproject+" and 'Metro Service' = '"+myService+"' and resolved >startOfDay('"+myPeriod+"')" + " and 'resolution'  not in ('Отозвана автором', 'Ответ не получен')"+" and 'Priority' = ";
string myJQL = "project = "+ myproject+" and 'component' = '"+component+"' and resolved >startOfDay('"+myPeriod+"')" + " and 'resolution'  not in ('Отозвана автором', 'Ответ не получен')"+" and 'Priority' = ";
string curpriotext = "Приоритет заявки: ";
string remainingLess = "Над вашей заявкой работают специалисты. Ожидайте решение в ближайшее время";
string usualPlanText = "Обычно мы решаем такие заявки за ";
string usualPlanTextWOcomponent = "Заявок данного типа за последние "+myPeriodText+" дней не было. Максимальное время решения заявки:";
// string remainingBlank ="Данных о среднем времени решения пока нет. Максимальное время решения вашей заявки с момента открытия: "; 
string CommentText;
string stat = "Статистика по данному типу задач.";
boolean[] tablelist;
interval inprogress = (currentDate()-created);
string statInProgress = "Ваша заявка в работе уже ";
string myTable = "";
string [] myPrio = {"1","2","3", "4"};
string [] keysArraywithdiffprio;
string [] keys;
struct Myinfo {         //структура информации
    string[] myissues; 
    number issuecount;
    string mypriority;
    interval averagetime; 
    string prioritytime;
    string plantime;
    string mintime;
    string maxtime;
    string medianatime;
    boolean needtable;
}
Myinfo Info; 

function getDataforInfoStructure(string infoPriority,string myJQL){//функция получения сроков решения 
    Myinfo CurInfo;
    date timetowait;date createddate;date resolveddate;
    interval [] allperiods;
    interval alldates;interval period;interval remaining;interval inprogress;
    string[] JQLresult = selectIssues(myJQL+infoPriority);
    
    if (infoPriority=="1"){CurInfo.prioritytime="24 часа";}
    if (infoPriority=="2"){CurInfo.prioritytime="5 дней";}
    if (infoPriority=="3"){CurInfo.prioritytime="10 дней";}
    if (infoPriority=="4"){CurInfo.prioritytime="60 дней";} 
    
    JQLresult = arraySort(JQLresult,false);
    CurInfo.myissues = JQLresult;
    CurInfo.issuecount = arraySize(JQLresult);
    CurInfo.mypriority = infoPriority;
    Info.mypriority = priority;
    if (size(JQLresult)!=0){
        for(string currentIssue in JQLresult){
            JFieldChange [] myLastChanges = lastIssueChanges(currentIssue.key);//данные о последнем изменении
            createddate = currentIssue.created;//дата создания
            resolveddate = myLastChanges[0].changeDate; //последнее обновление решенной задачи из списка
            period = resolveddate - createddate;//время решения
            alldates = alldates + period;//сумма времени решения всех задач из списка
            allperiods = arrayAddElement(allperiods, period);//массив всех сроков решения
            }
        allperiods = arraySort(allperiods, false);//сортируем массив по возрастающей
        number myIndex = floor(arraySize(allperiods)/2, 2);//индекс медианного значения
        CurInfo.averagetime = alldates/arraySize(allperiods);//среднее значение
        CurInfo.mintime = arrayGetElement(allperiods, 0);//минимальное (первое) значение
        CurInfo.maxtime = arrayGetElement(allperiods, arraySize(allperiods)-1);//максимальное(последнее) значение
        CurInfo.medianatime = arrayGetElement(allperiods,myIndex);//медиана
        inprogress = currentDate() - createddate;
        remaining = CurInfo.averagetime -(currentDate() - createddate);//расчет оставшегося времени
        CurInfo.plantime = CurInfo.medianatime;
        CurInfo.needtable = true;
        // if(remaining<0){
        //     CurInfo.plantime = remainingLess;
        // }
        // if(remaining>0){
        //     CurInfo.plantime = usualPlanText + CurInfo.medianatime;
        // } 
    }
   else{//если поиск пустой
        CurInfo.issuecount = 0;
        CurInfo.mintime = 0;
        CurInfo.maxtime = 0;
        CurInfo.medianatime = 0;
        CurInfo.averagetime = 0;
        CurInfo.plantime = CurInfo.prioritytime;
        CurInfo.needtable = false;
        usualPlanText=usualPlanTextWOcomponent;
        }
    return CurInfo;
}
function CreateTable(string[]myPrio){
    myTable = "||Приоритет||Количество||Среднее время||Мин.||Макс.||Медиана||"+"\n";//добавление заголовка таблицы
    for (string curPrio in myPrio){
        Myinfo CurInfo = getDataforInfoStructure(curPrio,myJQL);//проставление информации в каждую строку таблицы с отсеканием секунд
        tablelist = arrayAddElement(tablelist, CurInfo.needtable);
        myTable = myTable +
        "|"+curPrio+
        "|"+CurInfo.issuecount +
        "|"+chop(CurInfo.averagetime,length(CurInfo.averagetime)-3)+
        "|"+chop(CurInfo.mintime,length(CurInfo.mintime)-3)+
        "|"+chop(CurInfo.maxtime,length(CurInfo.maxtime)-3)+
        "|"+chop(CurInfo.medianatime,length(CurInfo.medianatime)-3)+
        "|"+"\n";
        if(CurInfo.mypriority == priority){
            usualPlanText=usualPlanText + " " + chop(CurInfo.plantime,length(CurInfo.plantime)-3);
        }
    }
    return myTable;
}
function translate(string CommentText){
    string []english={"w","d","h","m","s"};
    string []russian={"н","д","ч","м","с"};
    for(number i=0;i<4;i++){
        CommentText = replace(CommentText,english[i],russian[i]);
    }
    return CommentText;
}
  myTable = CreateTable(myPrio);
  CommentText = curpriotext + priority + "\n";
  CommentText = CommentText + usualPlanText+"\n";
  CommentText = CommentText + statInProgress+" " +chop(inprogress,length(inprogress)-3)+ "\n";
  if(elementExists(tablelist, true)==true){
    CommentText = CommentText + stat  + "\n";
    CommentText = CommentText + "\n" + myTable;
    }
CommentText = translate(CommentText);
addJSDComment(key, "remoteuser", CommentText, false, false);